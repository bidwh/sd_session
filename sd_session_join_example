package com.snapdeal.dwh.hadoop.invertory_forecast.map_reduce;

import java.io.IOException;
import java.util.ArrayList;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
//import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
//import org.apache.hadoop.mapreduce.Reducer.Context;
//import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
//import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

//import com.snapdeal.dwh.hadoop.invertory_forecast.map_reduce.Fact_join_cat_subcat.IntSumReducer;
//import com.snapdeal.dwh.hadoop.invertory_forecast.map_reduce.Fact_join_cat_subcat.TokenizerMapper;

public class Mapr_sd_join_example {
	

	
	 public static class TokenizerMapper
   extends Mapper<Object, Text, Text,Text >{

public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
	String[] split = value.toString().split(",");
	String values;
	Text keys ;
	if (split.length < 3 ) 
	{
		
	    values = "A" + "\t" + split[1];
	    keys = new Text(split[0]);
	}
	else
	{
		values = "B" + "\t" + split[1] + "\t" + split[2] + "\t" + split[3];
	    keys = new Text(split[0]);
	}
       
	
	
	context.write(keys, new Text(values));
	
  
}
}

public static class IntSumReducer
   extends Reducer<Text,Text,Text,Text> {
private Text result ;

public void reduce(Text key, Iterable<Text> values,
                   Context context
                   ) throws IOException, InterruptedException {
	 ArrayList<String> mylistA = new ArrayList<String>();
	 ArrayList<String> mylistB = new ArrayList<String>();
	 
  for (Text val_outer : values) {
	   String[] split = val_outer.toString().split("\t");
	   if (split[0].equals("A"))
		   mylistA.add(val_outer.toString());
	   else
		   mylistB.add(val_outer.toString());
  }
  
  for (String b : mylistB) 
  {
	   for (String a : mylistA)
	   {
		   result = new Text(a + "\t" + b);
		   context.write(key, result);
		   
	   }
  }

mylistA.clear();
mylistB.clear();
}
}

	
	


public static void main(String[] args) throws Exception {
  Configuration conf = new Configuration();
  
  Job job = Job.getInstance(conf, "seller_dwh_load");
  job.setJarByClass(Inventory_forecast_mapr.class);
  //MultipleInputs.addInputPath(job,new Path(args[0]),TextInputFormat.class);
  //MultipleInputs.addInputPath(job,new Path(args[1]),TextInputFormat.class);
  job.setMapperClass(TokenizerMapper.class);
  job.setReducerClass(IntSumReducer.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(Text.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  FileInputFormat.addInputPath(job, new Path(args[0]));
  FileOutputFormat.setOutputPath(job, new Path(args[1]));
  System.exit(job.waitForCompletion(true) ? 0 : 1);
}

	
	

}
